"use client";
import React, { useState } from "react";
import { motion } from "framer-motion";

const moodData = {
  "ЁЯШК": {
    title: { bn: "Happy", en: "Happy" },
    tips: {
      bn: [
        "рждрзЛржорж╛рж░ рж╣рж╛рж╕рж┐ржЯрж╛ ржЫржбрж╝рж┐ржпрж╝рзЗ ржжрж╛ржУ, ржЕржирзНржп ржХрж╛ржЙржХрзЗ ржЙрзОрж╕рж╛рж╣ ржжрж╛ржУ ЁЯТЪ",
        "ржЖржЬ ржПржХржЯрзБ рж╣рж╛рж▓ржХрж╛ ржмрзНржпрж╛ржпрж╝рж╛ржо ржХрж░рзЛ ржмрж╛ ржкрзНрж░ржХрзГрждрж┐рж░ ржоржзрзНржпрзЗ рж╣рж╛ржБржЯрзЛ ЁЯНГ",
        "ржирж┐ржЬрзЗрж░ ржкрзНрж░рж┐ржпрж╝ ржЧрж╛ржи рж╢рзБржирзЗ рж░рж┐рж▓рзНржпрж╛ржХрзНрж╕ ржХрж░рзЛ ЁЯО╢",
      ],
      en: [
        "Share your smile and spread positivity ЁЯТЪ",
        "Do some light exercise or walk in nature ЁЯНГ",
        "Listen to your favorite music and relax ЁЯО╢",
      ],
    },
    quote: {
      bn: "рж╕рзБржЦ рж╕ржВржХрзНрж░рж╛ржоржХ тАФ рж╕рзЗржЯрж┐ ржЫржбрж╝рж┐ржпрж╝рзЗ ржжрж╛ржУ ЁЯМ╝",
      en: "Happiness is contagious тАФ spread it around ЁЯМ╝",
    },
    bgColor: "var(--light-green)",      // global variable
    borderColor: "var(--color-light-green)",
    textColor: "var(--fourground-color)",
  },
  "ЁЯШЮ": {
    title: { bn: "Sad", en: "Sad" },
    tips: {
      bn: [
        "ржПржХржЯрж╛ ржЧржнрзАрж░ рж╢рзНржмрж╛рж╕ ржирж╛ржУ ржПржмржВ ржзрзАрж░рзЗ ржзрзАрж░рзЗ ржЫрж╛ржбрж╝рзЛ ЁЯМмя╕П",
        "рждрзЛржорж╛рж░ ржЕржирзБржнрзВрждрж┐ рж▓рж┐ржЦрзЗ ржлрзЗрж▓рзЛ ржмрж╛ ржХрж╛ржЙржХрзЗ ржмрж▓рзЛ ЁЯТн",
        "ржПржХржЯрзБ рж╣рж╛рж▓ржХрж╛ ржХржорзЗржбрж┐ ржмрж╛ ржЧрж╛ржи рж╢рзБржирзЗ ржорзБржб ржлрзНрж░рзЗрж╢ ржХрж░рзЛ ЁЯО╡",
      ],
      en: [
        "Take a deep breath and exhale slowly ЁЯМмя╕П",
        "Write down or share your feelings ЁЯТн",
        "Watch a light comedy or listen to happy music ЁЯО╡",
      ],
    },
    quote: {
      bn: "ржЕржирзНржзржХрж╛рж░ рж░рж╛рждржУ рж╢рзЗрж╖ рж╣ржмрзЗ, рж╕рзВрж░рзНржп ржЖржмрж╛рж░ ржЙржаржмрзЗ тШАя╕П",
      en: "Even the darkest night will end and the sun will rise тШАя╕П",
    },
    bgColor: "var(--dashboard-bg)",  // global variable
    borderColor: "var(--dashboard-blue)",
    textColor: "var(--fourground-color)",
  },
  "ЁЯШг": {
    title: { bn: "Stressed", en: "Stressed" },
    tips: {
      bn: [
        "рзл ржорж┐ржирж┐ржЯ deep breathing ржХрж░рзЛ ЁЯМ┐",
        "ржХрж┐ржЫрзБржХрзНрж╖ржгрзЗрж░ ржЬржирзНржп ржорзЛржмрж╛ржЗрж▓/рж╕рзНржХрзНрж░рж┐ржи ржерзЗржХрзЗ ржжрзВрж░рзЗ ржерж╛ржХрзЛ ЁЯУ╡",
        "ржЧрж░ржо ржкрж╛ржирж┐ ржжрж┐ржпрж╝рзЗ ржорзБржЦ ржзрзБржпрж╝рзЗ ржирж╛ржУ ржмрж╛ ржЪрж╛ ржЦрж╛ржУ тШХ",
      ],
      en: [
        "Do 5 minutes of deep breathing ЁЯМ┐",
        "Stay away from your screen for a while ЁЯУ╡",
        "Wash your face with warm water or have some tea тШХ",
      ],
    },
    quote: {
      bn: "ржерж╛ржорзЛ, рж╢рзНржмрж╛рж╕ ржирж╛ржУ тАФ рждрзБржорж┐ ржнрж╛рж▓рзЛ ржХрж░ржЫрзЛ ЁЯМ╕",
      en: "Pause. Breathe. You are doing your best ЁЯМ╕",
    },
    bgColor: "var(--gray-color)",
    borderColor: "var(--dashboard-border)",
    textColor: "var(--fourground-color)",
  },
  "ЁЯШ┤": {
    title: { bn: "Tired", en: "Tired" },
    tips: {
      bn: [
        "ржПржХржЯрзБ ржмрж┐рж╢рзНрж░рж╛ржо ржирж╛ржУ тАФ рж╢рж░рзАрж░ржУ ржпрждрзНржи ржЪрж╛ржпрж╝ ЁЯТд",
        "ржкрж╛ржирж┐ ржкрж╛ржи ржХрж░рзЛ ржУ рж╣рж╛рж▓ржХрж╛ рж╕рзНржЯрзНрж░рзЗржЪрж┐ржВ ржХрж░рзЛ ЁЯТз",
        "ржЖржЬ рж░рж╛рждрзЗ ржЕржирзНрждржд рзо ржШржгрзНржЯрж╛ ржШрзБржорзЗрж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзЛ ЁЯЫМ",
      ],
      en: [
        "Take some rest тАФ your body needs care too ЁЯТд",
        "Drink water and do some light stretching ЁЯТз",
        "Try to get at least 8 hours of sleep tonight ЁЯЫМ",
      ],
    },
    quote: {
      bn: "ржмрж┐рж╢рзНрж░рж╛ржо рж╕ржоржпрж╝рзЗрж░ ржЕржкржЪржпрж╝ ржиржпрж╝ тАФ ржПржЯрж┐ ржкрзБржирж░рж╛ржпрж╝ рж╢ржХрзНрждрж┐ ржкрж╛ржУржпрж╝рж╛рж░ ржЙржкрж╛ржпрж╝ тЪб",
      en: "Rest is not a waste of time тАФ itтАЩs how you recharge тЪб",
    },
    bgColor: "var(--dashboard-bg)",
    borderColor: "var(--dashboard-border)",
    textColor: "var(--fourground-color)",
  },
};

const MoodBasedHealth = () => {
  const [selectedMood, setSelectedMood] = useState(null);
  const [lang, setLang] = useState("bn");

  return (
    <div className="flex flex-col items-center justify-center py-12 px-4 text-center bg-gradient-to-b from-white via-green-50 to-white">
      {/* Header */}
      <h2 className="text-3xl sm:text-4xl font-extrabold text-gray-800 mb-4">
        ЁЯМ┐ Mood-Based Health Recommendations
      </h2>
      <p className="text-gray-600 mb-8 text-lg max-w-xl">
        {lang === "bn"
          ? "рждрзЛржорж╛рж░ ржмрж░рзНрждржорж╛ржи ржорзБржб рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рзЛ тАФ ржЖржорж░рж╛ рждрзЛржорж╛рж░ ржЬржирзНржп ржмрзНржпржХрзНрждрж┐ржЧржд рж╣рзЗрж▓рже ржЯрж┐ржкрж╕ ржжрзЗржм ЁЯТл"
          : "Select your current mood тАФ weтАЩll share personalized health tips ЁЯТл"}
      </p>

      {/* Mood Buttons */}
      <div className="flex gap-5 mb-10 flex-wrap justify-center">
        {Object.keys(moodData).map((emoji) => (
          <motion.button
            key={emoji}
            whileTap={{ scale: 0.9 }}
            whileHover={{ scale: 1.1 }}
            className={`text-5xl p-4 rounded-2xl shadow-lg border transition-all duration-300 ${
              selectedMood === emoji
                ? "bg-gray-200 border-gray-400"
                : "bg-white border-gray-200 hover:bg-gray-100"
            }`}
            onClick={() => setSelectedMood(emoji)}
          >
            {emoji}
          </motion.button>
        ))}
      </div>

      {/* Mood Card */}
      {selectedMood && (
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.4 }}
          className="max-w-lg p-8 rounded-3xl border-2 shadow-xl"
          style={{
            backgroundColor: moodData[selectedMood].bgColor,
            borderColor: moodData[selectedMood].borderColor,
            color: moodData[selectedMood].textColor,
          }}
        >
          <h3 className="text-3xl font-semibold mb-4">
            {moodData[selectedMood].title[lang]} Mood ЁЯТм
          </h3>
          <ul className="space-y-3 text-left list-disc list-inside mb-4">
            {moodData[selectedMood].tips[lang].map((tip, i) => (
              <li key={i}>{tip}</li>
            ))}
          </ul>
          <div className="italic text-sm border-t pt-3 mb-5">
            ЁЯТб <span>{moodData[selectedMood].quote[lang]}</span>
          </div>

          {/* Language Toggle */}
          <motion.button
            whileTap={{ scale: 0.95 }}
            whileHover={{ scale: 1.05 }}
            onClick={() => setLang(lang === "bn" ? "en" : "bn")}
            className="mt-3 px-5 py-2 bg-green-600 text-white rounded-full shadow-md hover:bg-green-700 transition"
          >
            {lang === "bn" ? "Switch to English ЁЯЗмЁЯЗз" : "ржмрж╛ржВрж▓рж╛рзЯ ржжрзЗржЦрзБржи ЁЯЗзЁЯЗй"}
          </motion.button>
        </motion.div>
      )}
    </div>
  );
};

export default MoodBasedHealth;
